import PySimpleGUI as sg
import os.path
import pickle
from sklearn.pipeline import Pipeline
import pandas as pd
import time
import joblib

def close(window,df):
    ts = time.time()
    df.to_csv(str(int(ts))+"_results.csv")
    window.close()


def removeUserMention(string):
    if string.startswith('@'):
        return "__user_mention__"
    
    return string

def cleanMentions(tweet):
    try:
        tokens = tweet.split()
        tokens = [removeUserMention(elem) for elem in tokens]  
        return ' '.join([str(elem) for elem in tokens])
    except:
        return tweet

def removeUrl(string):
    if string.startswith('http'):
        return "__url__"
    return string

def cleanUrls(tweet):
    try:
        tokens = tweet.split()
        tokens = [removeUrl(elem) for elem in tokens]  
        return ' '.join([str(elem) for elem in tokens])
    except:
        return tweet



classifier = joblib.load(open('finalized_model2.pkl', 'rb'))
df = pd.DataFrame(columns = ['Tweet','Class', 'Timestamp'])

# Define the window's contents
layout = [[sg.Text("Tweet")],
          [sg.Multiline(size=(35,8),key='-INPUT-')],
          [sg.Text("Results will be saved on csv file",size=(35,1), key='-OUTPUT-')],
          [sg.Text(size=(35,1), key='-OUTPUT-')],
          [sg.Button('Analyze'), sg.Button('Clear')]]

# Create the window
window = sg.Window('TweepFake Detection', layout)

# Display and interact with the Window using an Event Loop
while True:
    event, values = window.read()
    if event == 'Clear':
        for key in values:
            window['-INPUT-'].update('')
        continue
    # See if user wants to quit or window was closed
    elif event == sg.WINDOW_CLOSED:
        break
    # Output a message to the window
    elif event == 'Analyze':
        values['-INPUT-'] = cleanMentions(values['-INPUT-'])
        values['-INPUT-'] = cleanUrls(values['-INPUT-'])
        y_pred = classifier.predict([values['-INPUT-']])
        window['-OUTPUT-'].update("The tweet is generated by a "+y_pred[0])
        new_row = {'Tweet' : [values['-INPUT-']],'Class':[y_pred[0]], 'Timestamp': [pd.Timestamp.now().timestamp()]}
        print(new_row)
        new_df = pd.DataFrame.from_dict(new_row)
        df = pd.concat([df,new_df])

# Finish up by removing from the screen
close(window,df)

